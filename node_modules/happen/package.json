{
  "name": "happen",
  "version": "0.1.3",
  "description": "real browser events",
  "main": "happen.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tmcw/happen.git"
  },
  "keywords": [
    "testing",
    "browser"
  ],
  "devDependencies": {
    "mocha": "~1.8",
    "expect.js": "~0.2.0"
  },
  "testling": {
    "browsers": {
      "ie": [
        7,
        8,
        9,
        10
      ],
      "opera": [
        12
      ],
      "firefox": [
        3.5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19
      ],
      "chrome": [
        20,
        21,
        22,
        23,
        24,
        25
      ],
      "safari": [
        5.1,
        6
      ],
      "iphone": [
        6
      ]
    },
    "harness": "mocha",
    "files": [
      "jquery/jquery.js",
      "test/happen.js"
    ]
  },
  "author": {
    "name": "Tom MacWright"
  },
  "license": "BSD",
  "readme": "**happen** wraps the `createEvent` DOM API to make real\nevent mocking in-browser palatable.\n\n## Installation\n\nRaw:\n\n    wget https://raw.github.com/tmcw/happen/master/happen.js\n\nWith [component](https://github.com/component/component)\n\n    component install tmcw/happen\n\n## With Browserify\n\n    npm install happen\n\n    var happen = require('happen');\n\n## Native API\n\n### once()\n\n`happen.once(element, options)` fires an event once. The `element` must\nbe a DOM element. `options` must have a `type` for event type, then can\nhave options:\n\n#### Keyboard Events\n\n* keyCode\n* charCode\n* shiftKey\n* metaKey\n* ctrlKey\n* altKey\n\n#### Mouse Events\n\n* detail\n* screenX\n* screenY\n* clientX\n* clientY\n* ctrlKey\n* altKey\n* shiftKey\n* metaKey\n* button\n\n```javascript\nvar element = document.getElementById('map');\n\n// click shortcut\nhappen.click(element);\n\n// dblclick shortcut\nhappen.dblclick(element);\n\n// custom options\nhappen.dblclick(element, { shift: true });\n\n// any other event type under MouseEvents\nhappen.once(element, {\n    type: 'mousewheel',\n    detail: -100\n});\n\n// The once api takes\nhappen.once(\n    // element\n    element, {\n        // event type (e.type)\n        type: 'mousewheel',\n        // any other options\n        detail: -100\n    });\n```\n\n## jQuery Plugin\n\n```javascript\n// Shortcut - 'click' is shorthand for { type: 'click' }\n$('.foo').happen('click');\n\n// Longhand - specify any sort of properties\n$('.foo').happen({ type: 'keyup', keyCode: 50 });\n\n// Works on any jQuery selection\n$('.foo, .bar').happen('dblclick');\n```\n\nShortcuts:\n\n* `happen.click`\n* `happen.dblclick`\n* `happen.mousedown`\n* `happen.mouseup`\n* `happen.mousemove`\n* `happen.keydown`\n* `happen.keyup`\n* `happen.keypress`\n\nUse it with a testing framework, like [Jasmine](http://pivotal.github.com/jasmine/)\nor [Mocha](http://visionmedia.github.com/mocha/).\n\n[![](http://ci.testling.com/tmcw/happen.png)](http://ci.testling.com/tmcw/happen)\n\n(IE tests failing due to Chai)\n\n## See Also\n\n* [trigger-event](https://github.com/adamsanderson/trigger-event)\n* [dom-event](https://github.com/jkroso/dom-event)\n* [synthetic-dom-events](https://github.com/shtylman/synthetic-dom-events)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tmcw/happen/issues"
  },
  "_id": "happen@0.1.3",
  "dist": {
    "shasum": "357ac760fab8745b9e56b69cb9d3af2c009f1539"
  },
  "_from": "happen@~0.1.3",
  "_resolved": "https://registry.npmjs.org/happen/-/happen-0.1.3.tgz"
}
